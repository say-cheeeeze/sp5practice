챕터6

2.1 빈 객체의 초기화와 소멸

> 컨테이너 초기화

AnnotationConfigApplicationContext 의 생성자를 이용해서 컨텍스트 객체를 생성한다.
이 때 스프링 컨테이너가 초기화된다.
스프링 컨테이너는 설정 클래스에서 정보를 읽어와 알맞는 Bean 객체를 생성하고
각 Bean 을 연결 ( = 의존주입 ) 하는 작업을 수행한다.

컨테이너 초기화가 완료되면 컨테이너를 사용할 수 있다.
컨테이너를 사용한다는 것은 getBean() 과 같은 메서드를 이용해 컨테이너에 보관된
Bean 객체를 구한다는 것을 뜻한다. 

컨테이너 초기화 -> Bean 객체의 생성, 의존 주입, 초기화
컨테이너 종료 -> Bean 객체의 소멸

> 즉 스프링 컨테이너의 라이프 사이클에 따라 Bean 객체도 자연스럽게 생성과 소멸이라는 
라이플 사이클을 갖는다.

스프링 컨테이너는 Bean 객체의 라이프 사이클을 관리한다.
컨테이너가 관리하는 Bean 객체의 라이프사이클은 다음과 같다.
객체 생성 -> 의존 설정 -> 초기화 -> 소멸

스프링은컨테이너를 초기화 할 때 스프링 컨테이너는 가장 먼저 Bean 객체를 생성하고
의존을 설정한다.
의존 자동 주입을 통한 의존 설정이 이 시점에 수행된다.
모든 의존 설정이 완료되면 Bean 객체의 초기화를 수행한다.
스프링 컨테이너를 종료하면 스프링 컨테이너는 Bean 객체의 소멸을 처리한다.
이 때도 지정한 메서드를 호출한다.

2.2 빈 객체의 초기화와 소멸 : 커스텀 메서드

모든 클래스가 InitializingBean인터페이스와 DisposableBean인터페이스를 상속받아 
구현할 수 있는 것은 아니다.
직접 구현한 클래스가 아닌 외부에서 제공받은 클래스를 스프링 빈 객체로 설정하고 싶을 때도 있다.
이 경우 소스 코드를 받지 않았다면 두 인터페이스를 구현하도록 수정할 수 없다.
이럴 때는 @Bean태그에서 initMethod속성과 destroMethod속성을 이용해 초기화/소멸 메소드의 이름을
지정할 수 있다.

